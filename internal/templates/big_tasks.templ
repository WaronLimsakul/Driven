package templates

import (
	"github.com/WaronLimsakul/Driven/internal/database"
	"fmt"
	"database/sql"
	"strconv"
)

templ priorityStars(prior int32) {
	switch prior {
		case 3:
			<span class="text-yellow-400 mb-2">***</span>
		case 2:
			<span class="text-yellow-400 mb-2">**</span>
		case 1:
			<span class="text-yellow-400 mb-2">*</span>
		default:
			<div></div>
	}
}

func getTextHeight(text string) int {
	i := 1
	for _, char := range text {
		if char == '\n' {
			i++
		}
	}
	return i
}

templ keysArea(keys sql.NullString) {
	// if the keys already exist, return the extended one
	if keys.Valid {
		<textarea
			class="w-full h-auto min-h-20 p-2 bg-gray-700 text-white rounded my-2 resize-none overflow-hidden"
			name="task-keys"
			rows={ strconv.Itoa(getTextHeight(keys.String)) }
			oninput="this.style.height = ''; this.style.height = this.scrollHeight + 'px'"
			placeholder="what should know when doing this?">
			{ keys.String }
		</textarea>
	} else {
		<textarea
			class="w-full h-auto min-h-20 p-2 bg-gray-700 text-white rounded my-2 resize-none overflow-hidden"
			name="task-keys"
			oninput="this.style.height = ''; this.style.height = this.scrollHeight + 'px'"
			placeholder="what should you know when doing this?">
		</textarea>
	}
}

templ BigTask(task database.Task) {
	// the id doesn't work with query selector, so I have to use name
	<div id={ task.ID.String() } class="bg-gray-800 p-4 mx-2 rounded-lg">
		<div class="flex items-center justify-between">
			<div class="flex items-center gap-1 my-2">
				@bigCheckBox(task)
				if task.IsDone {
					<s class="my-auto ml-2 font-semibold">{ task.Name }</s>
				} else {
			    	<div class="my-auto ml-2 font-semibold">{ task.Name }</div>
				}
				@priorityStars(task.Priority)
			</div>

			// deleting task button
			<button
				class="p-2 rounded-full cursor-pointer hover:bg-gray-600 transition-colors"
				hx-confirm={ fmt.Sprintf("Deleting task '%s'?", task.Name) }
				hx-delete={ fmt.Sprintf("/tasks/%s", task.ID.String()) }
   				hx-target={ fmt.Sprintf("[id='%s']", task.ID.String()) }
				hx-swap="outerHTML"
			>
	        	<img src="/static/img/delete.svg" width="20"/>
	        </button>
		</div>
        // <div class="text-sm mb-2">Timer: ....</div>
        <form
	        hx-put={ fmt.Sprintf("/tasks/day/%s/keys", task.ID.String()) }
			hx-target="find p"
			hx-disabled-elt="find button"
    		class="keys-area flex flex-col gap-2">
      		@keysArea(task.Keys)
       		<div class="flex flex-row gap-2 items-center">
                <button
                    type="submit"
                    class="bg-flame-primary hover:bg-flame-accent disabled:bg-gray-500 text-white cursor-pointer px-4 py-1 rounded self-start">
                    Save
                </button>
                <p id="t" class="text-white"></p>
            </div>
        </form>
    </div>
}

templ BigTasksColumn(tasks []database.Task) {
    <div id="big-tasks-column" class="space-y-4">
    for _, task := range tasks {
       	@BigTask(task)
    }
    </div>
}

templ DoneBigTaskResponse(task database.Task) {
	<div hx-swap-oob="beforeend:#big-tasks-column">
		@BigTask(task)
	</div>
}

templ DeleteTaskResponse() {
}
